
/**
 * 1.4 Palindrome Permutation
 * Given a string, write a function to check if it is a permutation 
 * of a palindrome. A palindrome is a word or phrase that is the same
 * forwards and backwards. A permutation is a rearrangement of letters.
 * The palindrome does not need to be limited to just dictioniary words
 * Example :
 * Input : Tact Coa
 * Output : True (permutations: "taco cat", "atco cta", etc.)
 */
public class palindromePermutation {
	public static void main(String[] args) {}
	
	// Map each character in the String to a number
	public static int getCharNumber(Character c) {
		int a = Character.getNumericValue('a'); // 10
		int z = Character.getNumericValue('z'); // 35
		int val = Character.getNumericValue(c);
		
		if(a <= val && val <= z) {
			return val - a; //subtract 10 from the numeric value of val
		}
		return -1; 
	}
	
	// Count how many times each character appears in the String
	public static int[] buildCharFrequencyTable(String phrase) {
		// create an array of size 26
		int[] table = new int[Character.getNumericValue('z') - Character.getNumericValue('a') + 1];
		
		
		char[] phraseChars = phrase.toCharArray();
		
		for (char c : phraseChars) {
			int x = getCharNumber(c);
			
			// x is not a letter
			if (x != -1) {
				table[x]++; //increment the element at x in the table
			}
		}
		System.out.print(table);
		return table;
	}
	

}
